C51 COMPILER V9.60.0.0   TASKUART                                                          05/19/2020 12:05:05 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TASKUART
OBJECT MODULE PLACED IN TaskUart.obj
COMPILER INVOKED BY: F:\keil c51\C51\BIN\C51.EXE procedure\TaskUart.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\TaskUart.lst) TABS(2) OBJECT(TaskUart.obj)

line level    source

   1          
   2          
   3          #include "TaskUart.h"
   4          
   5          
   6          //--------------------------函数说明--------------------------------------------//
   7          //函数功能：  完成对数据帧的校验
   8          //入口参数：  *DATaFrame:待校验的数据帧地址
   9          //返回值：  返回0表示校验成功，返回其他值表示校验失败
  10          //                      （1:包头错误；2:包尾或长度错误；3:校验和错误）
  11          
  12          //-------------------------函数测试----------------------------------------//
  13          //text1：输入：AA 55 06 20 21 00 58 FF FF 5F 55 AA    返回值：0   说明：数据帧校验成功
  14          //text2：输入：AA 55 06 20 21 00 58 FF FF 11 55 AA    返回值：3   说明：校验和错误
  15          //text3：输入：AA 06 20 21 00 58 FF FF 5F 55 AA       返回值：1   说明：包头错误
  16          //text4：输入：AA 55 06 20 21 00 58 FF FF 5F 55       返回值：2   说明：包尾错误
  17          //text5：输入：AA 55 04 20 21 00 58 FF FF 5F 55 AA    返回值：2   说明：数据长度错误
  18          //--------------------------------
  19          //作者：Liao_tingchun   
  20          //修改日期：2020/05/15
  21          //修改内容：初次完成基本功能
  22          //----------------------------
  23          u8 DataValidityCheck(u8 *DataFrame)
  24          {
  25   1        u8 i = 0,datalen = 0,Parity = 0;
  26   1        u8 *point;
  27   1        point = DataFrame;
  28   1        if( (*(point) != 0xAA) || (*(point+1) != 0x55))
  29   1          return 1;//数据包头错误
  30   1        
  31   1        datalen = *(point+2);//获取数据部分长度
  32   1        if( (*(point+datalen+4) != 0x55) || (*(point+datalen+5) != 0xAA))
  33   1          return 2;//数据包尾错误
  34   1        
  35   1        Parity = datalen;
  36   1        for(i=3;i<datalen+3;i++)//计算校验和
  37   1          Parity =Parity ^ *(point+i);//按位异或运算
  38   1        if(Parity != *(point+datalen+3))
  39   1          return 3;//校验和错误
  40   1        
  41   1        return 0;//校验成功
  42   1      }
  43          
  44          
  45          //--------------------------函数说明--------------------------------------------//
  46          //函数功能：  数据校验成功后，从控板调用该函数解析数据
  47          //入口参数：  *DataBuff:需要解析的数据帧地址
  48          //返回值：    无
  49          
  50          //--------------------------------
  51          //作者：Liao_tingchun   
  52          //修改日期：2020/05/15
  53          //修改内容：初次完成基本功能
  54          //----------------------------
C51 COMPILER V9.60.0.0   TASKUART                                                          05/19/2020 12:05:05 PAGE 2   

  55          void DataAnalyze(u8 *DataBuff)
  56          {
  57   1        u8 i=0;
  58   1        u8 *point;
  59   1        u8 data_H,data_L;
  60   1        u8 FunctionCode = *(point+6);//功能码
  61   1        point = DataBuff;
  62   1        switch(FunctionCode)
  63   1        {
  64   2          case 0x5B://主控板至从控板的控制信息
  65   2          {
  66   3            for(i=0;i<6;i++)
  67   3              MasterDataBuff[i] = *(point+7+i);//写入6个LED的控制状态
  68   3            for(i=0;i<7;i++)
  69   3              MasterDataBuff[i+12] = *(point+19+i);//写入7个继电器的控制状态
  70   3            for(i=0;i<3;i++)
  71   3              MasterDataBuff[i+23] = *(point+30+i);//使能3个孔位      
  72   3            TaskControlFlag = 1;
  73   3            break;
  74   3          }
  75   2          case 0x5C://设置限制抽液次数
  76   2          {
  77   3            data_H = *(point+7);
  78   3            data_L = *(point+8);
  79   3            MasterDataBuff[21] = data_H;MasterDataBuff[22] = data_L;//EEPROM任务从这里读取并写入，完成设置
  80   3            TaskEEPROMFlag = 1;//标志位置位，EEPROM任务写入完成后清标志位
  81   3            break;
  82   3          }
  83   2          case 0x5D://询问剩余限制次数
  84   2          {
  85   3            FramePacking(0x70,&SlaveDataBuff [21]);//直接上传
  86   3            //TaskUploadFlag = 1;//置位该上传任务
  87   3            break;
  88   3          }
  89   2          case 0x5E://查询工作状态
  90   2          {
  91   3            TaskUploadFlag = 1;//置位该上传任务
  92   3            break;
  93   3          }
  94   2          case 0x60://设置上传时间间隔
  95   2          {
  96   3            data_H = *(point+7);
  97   3            data_L = *(point+8);  //只用到了低8位数据
  98   3            SlaveDataBuff[20] = data_L;//本地保存时间间隔
  99   3            MasterDataBuff[20] = data_L;
 100   3            break;
 101   3          }
 102   2          default:break;
 103   2        } 
 104   1      }
 105          
 106          
 107          
 108          //--------------------------函数说明--------------------------------------------//
 109          //函数功能：  将数据按照协议打包成帧并发送
 110          //入口参数：  FunctionCode:功能码
 111          //            *DataBuff:需要发送的数据区的内容
 112          //返回值：    无
 113          
 114          //--------------------------------
 115          //作者：Liao_tingchun   
 116          //修改日期：2020/05/16
C51 COMPILER V9.60.0.0   TASKUART                                                          05/19/2020 12:05:05 PAGE 3   

 117          //修改内容：初次完成基本功能
 118          //----------------------------
 119          void FramePacking(u8 FunctionCode,u8 *DataBuff)
 120          {
 121   1      
 122   1        u8 DataLen;//数据区长度,指有效的数据长度，不包含设备编码和功能码
 123   1        u8 *point = DataBuff;
 124   1        u8 Parity;
 125   1        u8 i=0; //数据串下标
 126   1        u8 SendStr[MaxSendStr] =    //下面只缓存到校验位之前
 127   1                          {0xAA,0x55,//数据包头
 128   1                          0xFF,//数据段长度【MCU的问题吗？初始化不能用变量赋值，后面重写一次吧】
 129   1                          0x21,0x20,//发送和接收方识别码
 130   1                          0x00,//是否需要应答
 131   1                          0xFF//功能码，由总协议文档规定【MCU的问题吗？初始化不能用变量赋值，后面重写一次吧】
 132   1                          };
 133   1        if(FunctionCode == 0x70)  DataLen =2;
 134   1        else if(FunctionCode == 0x71) DataLen =23;  
 135   1        SendStr[2] = DataLen+4;//重新把长度写到数据帧里面，+4
 136   1        SendStr[6] = FunctionCode;//重新把功能码写到数据帧里面                
 137   1        for(i=0;i<DataLen;i++)              
 138   1              SendStr[i+7] = *(point+i);  //添加数据区  
 139   1                          
 140   1        Parity = SendStr[2];
 141   1        for(i=3;i<SendStr[2]+3;i++)//计算校验数据
 142   1          Parity = Parity^SendStr[i];//按位异或运算
 143   1                          
 144   1        SendStr[i]=Parity;i++;//添加校验数据
 145   1        SendStr[i]=0x55;i++;
 146   1        SendStr[i]=0xAA;i++;//添加数据包尾部
 147   1      //数据帧打包完毕
 148   1      
 149   1        SendDataLen(SendStr,DataLen+10);//发送数据包
 150   1      }
 151          
 152          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    841    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----      70
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
