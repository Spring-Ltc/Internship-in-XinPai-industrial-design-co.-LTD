C51 COMPILER V9.60.0.0   USART1                                                            05/19/2020 12:05:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE USART1
OBJECT MODULE PLACED IN USART1.obj
COMPILER INVOKED BY: F:\keil c51\C51\BIN\C51.EXE procedure\USART1.C LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\USART1.lst) TABS(2) OBJECT(USART1.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          
  15          #include "USART1.h"
  16          
  17          
  18          COMx_Define COM1;
  19          u8   TX1_Buffer [COM_TX1_Lenth];  //发送缓冲
  20          u8   RX1_Buffer [COM_RX1_Lenth];  //接收缓冲
  21          //u8  TimeOutSet1;
  22          u8 state=0;//状态机状态标志
  23          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  24          {
  25   1        u8  i;
  26   1        u32 j;
  27   1        
  28   1        if(UARTx == USART1)
  29   1        {
  30   2          COM1.id = 1;
  31   2          COM1.TX_read    = 0;
  32   2          COM1.TX_write   = 0;
  33   2          COM1.B_TX_busy  = 0;
  34   2          COM1.RX_Cnt     = 0;
  35   2          COM1.RX_TimeOut = 0;
  36   2          COM1.B_RX_OK    = 0;
  37   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  38   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  39   2      
  40   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 1; //模式错误
  41   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  42   2          else                  PS = 0; //低优先级中断
  43   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  44   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  45   2          {
  46   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  47   3            if(j >= 65536UL)  return 2; //错误
  48   3            j = 65536UL - j;
  49   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  50   3            {
  51   4              TR1 = 0;
  52   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  53   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  54   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
C51 COMPILER V9.60.0.0   USART1                                                            05/19/2020 12:05:04 PAGE 2   

  55   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  56   4              TH1 = (u8)(j>>8);
  57   4              TL1 = (u8)j;
  58   4              ET1 = 0;  //禁止中断
  59   4              TMOD &= ~0x40;  //定时
  60   4              INT_CLKO &= ~0x02;  //不输出时钟
  61   4              TR1  = 1;
  62   4            }
  63   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  64   3            {
  65   4              AUXR &= ~(1<<4);  //Timer stop
  66   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  67   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  68   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  69   4              TH2 = (u8)(j>>8);
  70   4              TL2 = (u8)j;
  71   4              IE2  &= ~(1<<2);  //禁止中断
  72   4              AUXR &= ~(1<<3);  //定时
  73   4              AUXR |=  (1<<4);  //Timer run enable
  74   4            }
  75   3            else return 2;  //错误
  76   3          }
  77   2          else if(COMx->UART_Mode == UART_ShiftRight)
  78   2          {
  79   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  80   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  81   3          }
  82   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  83   2          {
  84   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  85   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  86   3          }
  87   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  88   2          else                ES = 0; //禁止中断
  89   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
  90   2          else                REN = 0;  //禁止接收
  91   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
  92   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  93   2          else                  PCON2 &= ~(1<<4);
  94   2          return  0;
  95   2        }
  96   1        return 3; //其它错误
  97   1      }
  98          
  99          
 100          
 101          
 102          void  UART_config(void)
 103          {
 104   1        COMx_InitDefine   COMx_InitStructure;         //
 105   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit
             -_BRTx
 106   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //BRT_Timer1, BRT_Timer2 (×￠òa: ′??ú21ì?¨ê1ó?B
             -RT_Timer2)
 107   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率可变 110 ~ 115200  115200ul
 108   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //允许接收,   ENABLE?DISABLE
 109   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE?DISABLE
 110   1        COMx_InitStructure.UART_Interrupt = ENABLE;       //中断控制,   ENABLE?òDISABLE
 111   1        COMx_InitStructure.UART_Polity    = PolityLow;      //优先级, PolityLow,PolityHigh
 112   1        COMx_InitStructure.UART_P_SW      = UART1_SW_P36_P37; //端口切换,   UART1_SW_P30_P31,UART1_SW_P36_P37,UAR
             -T1_SW_P16_P17(±?D?ê1ó??ú2?ê±?ó)
 113   1        COMx_InitStructure.UART_RXD_TXD_Short = DISABLE;    //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
C51 COMPILER V9.60.0.0   USART1                                                            05/19/2020 12:05:04 PAGE 3   

 114   1        USART_Configuration(USART1, &COMx_InitStructure);   // USART1,USART2
 115   1      
 116   1      }
 117          /*************** 装载串口发送缓冲 *******************************/
 118          
 119          //void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
 120          //{
 121          //  TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
 122          //  if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 123          
 124          //  if(COM1.B_TX_busy == 0)   //空闲
 125          //  {  
 126          //    COM1.B_TX_busy = 1;   //标志忙
 127          //    TI = 1;         //触发发送中断
 128          //  }
 129          //}
 130          
 131          //void PrintString1(u8 *puts)
 132          //{
 133          //    for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //遇到停止符0结束
 134          //}
 135          
 136          /**************************************************************************
 137          功能：STC15单片机的串口发送字节的函数
 138          参数：dat:要发送的一个字节   
 139          **************************************************************************/
 140          void UART_Send_Byte(unsigned char dat)
 141          {
 142   1          ES=0;    // 使用查询发送结束方式，禁止中断干预  ES 串行中断 允许位
 143   1          SBUF = dat;
 144   1          while(!TI);     
 145   1          TI=0;  //此句可以不要，不影响后面数据的发送，只供代码查询数据是否发送完成
 146   1          ES=1;
 147   1      } 
 148          
 149          /********************* UART1中断函数************************/
 150          void UART1_int (void) interrupt UART1_VECTOR
 151          {
 152   1      
 153   1      
 154   1        u8 res;
 155   1        if(RI)//接收中断标志位
 156   1        {
 157   2          res = SBUF;
 158   2          RX1_Buffer[COM1.RX_Cnt++] = res;//存到缓存区
 159   2          
 160   2          if(state != 2)  //状态：定时器未打开
 161   2          {
 162   3            COM1.RX_Cnt=0;
 163   3            switch (state)
 164   3            {
 165   4              case 0://未收到AA
 166   4              {
 167   5                if(res == 0xAA)
 168   5                  state = 1;
 169   5                break;
 170   5              }
 171   4              case 1://收到AA
 172   4              {
 173   5                if(res == 0x55)
 174   5                {
 175   6                  state =2;
C51 COMPILER V9.60.0.0   USART1                                                            05/19/2020 12:05:04 PAGE 4   

 176   6                  RX1_Buffer[0]=0xAA,RX1_Buffer[1]=0x55;//确认收到头部，手动添加到缓存数组
 177   6                  COM1.RX_Cnt=2;//下一个数据从RX1_Buffer[2]开始缓存
 178   6                  TR1 = 1;
 179   6                  //COM1.RX_TimeOut = TimeOutSet1;//【开定时器】
 180   6                }
 181   5                else if(res == 0xAA)  state = 1;
 182   5                else state = 0;
 183   5                break;
 184   5              }
 185   4              default:  break;
 186   4            }
 187   3          }
 188   2          RI=0;//清中断标志位，准备接收下一个字节
 189   2        }
 190   1      }
 191          
 192          
 193          
 194          void SendDataLen(u8 *DataBuff,u8 len)
 195          {
 196   1        u8 i=0;
 197   1        u8 *point = DataBuff;
 198   1        for(i=0;i<len;i++)
 199   1        {
 200   2          UART_Send_Byte(*(point+i));
 201   2        }
 202   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    788    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     74      23
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
