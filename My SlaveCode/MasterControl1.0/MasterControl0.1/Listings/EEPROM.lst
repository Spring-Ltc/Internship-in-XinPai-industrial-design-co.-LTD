C51 COMPILER V9.54   EEPROM                                                                05/25/2020 10:34:23 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN EEPROM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Spring Program Files(x86)\MDK4 and MDK5\C51\BIN\C51.EXE procedure\EEPROM.c L
                    -ARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\EEPROM.lst) TABS(2) OBJECT(EEPROM.obj)

line level    source

   1          
   2          //  本程序是STC系列的内置EEPROM读写程序。
   3          
   4          #include "config.h"
   5          #include "eeprom.h"
   6          
   7          
   8          //========================================================================
   9          // 函数: void ISP_Disable(void)
  10          // 描述: 禁止访问ISP/IAP.
  11          // 参数: non.
  12          // 返回: non.
  13          // 版本: V1.0, 2012-10-22
  14          //========================================================================
  15          void  DisableEEPROM(void)
  16          {
  17   1        ISP_CONTR = 0;      //禁止ISP/IAP操作
  18   1        ISP_CMD   = 0;      //去除ISP/IAP命令
  19   1        ISP_TRIG  = 0;      //防止ISP/IAP命令误触发
  20   1        ISP_ADDRH = 0xff;   //清0地址高字节
  21   1        ISP_ADDRL = 0xff;   //清0地址低字节，指向非EEPROM区，防止误操作
  22   1      }
  23          
  24          //========================================================================
  25          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  26          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  27          // 参数: EE_address:  读出EEPROM的首地址.
  28          //       DataAddress: 读出数据放缓冲的首地址.
  29          //       number:      读出的字节长度.
  30          // 返回: non.
  31          // 版本: V1.0, 2012-10-22
  32          //========================================================================
  33          
  34          u8 EEPROM_read_n(u16 DataAddress)//读函数
  35          {
  36   1        u8 dat;
  37   1        EA = 1;   //禁止中断
  38   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  39   1        ISP_READ();                 //送字节读命令，命令不需改变时，不需重新送命令
  40   1      //  do
  41   1      //  {
  42   1        //  IAP_CMD = CMD_READ;             //设置IAP命令
  43   1          ISP_ADDRH = DataAddress / 256;    //送地址高字节（地址需要改变时才需重新送地址）
  44   1          ISP_ADDRL = DataAddress % 256;    //送地址低字节
  45   1        
  46   1          ISP_CMD=1;//写字节模式
  47   1          ISP_TRIG = 0x5a;                //写触发命令(0x5a)
  48   1          ISP_TRIG = 0xa5;                //写触发命令(0xa5)
  49   1        //  ISP_TRIG();             //先送5AH，再送A5H到ISP/IAP触发寄存器，每次都需要如此
  50   1                            //送完A5H后，ISP/IAP命令立即被触发启动
  51   1                            //CPU等待IAP完成后，才会继续执行程序。
  52   1          _nop_();
  53   1          dat  = ISP_DATA;      //读出的数据送往等待ISP/IAP/EEPROM操作完成
  54   1      //    EE_address++;
C51 COMPILER V9.54   EEPROM                                                                05/25/2020 10:34:23 PAGE 2   

  55   1      //  DataAddress++;
  56   1      //  }while(--number);
  57   1          
  58   1        DisableEEPROM();
  59   1        
  60   1        
  61   1       // EA = 1;   //重新允许中断
  62   1        return dat;  
  63   1      }
  64          
  65          
  66          /******************** 扇区擦除函数 *****************/
  67          //========================================================================
  68          // 函数: void EEPROM_SectorErase(u16 EE_address)
  69          // 描述: 把指定地址的EEPROM扇区擦除.
  70          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  71          // 返回: non.
  72          // 版本: V1.0, 2013-5-10
  73          //========================================================================
  74          void EEPROM_SectorErase(u16 EE_address)//擦除一个扇区
  75          {
  76   1        EA = 0;   //禁止中断
  77   1                            //只有扇区擦除，没有字节擦除，512字节/扇区。
  78   1                            //扇区中任意一个字节地址都是扇区地址。
  79   1        ISP_ADDRH = EE_address / 256;     //送扇区地址高字节（地址需要改变时才需重新送地址）
  80   1        ISP_ADDRL = EE_address % 256;     //送扇区地址低字节
  81   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  82   1        ISP_ERASE();              //送扇区擦除命令，命令不需改变时，不需重新送命令
  83   1        ISP_TRIG();
  84   1        _nop_();
  85   1        DisableEEPROM();
  86   1        EA = 1;   //重新允许中断
  87   1      }
  88          
  89          //========================================================================
  90          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  91          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  92          // 参数: EE_address:  写入EEPROM的首地址.
  93          //       DataAddress: 写入源数据的缓冲的首地址.
  94          //       number:      写入的字节长度.
  95          // 返回: non.
  96          // 版本: V1.0, 2012-10-22
  97          //========================================================================
  98          void  EEPROM_write_n(u16 addr,u8 dat)//写函数
  99          {
 100   1         // EA = 1;   //禁止中断
 101   1      
 102   1          ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
 103   1          ISP_WRITE();              //送字节写命令，命令不需改变时，不需重新送命令
 104   1          ISP_ADDRH = addr / 256;   //送地址高字节（地址需要改变时才需重新送地址）
 105   1          ISP_ADDRL = addr % 256;   //送地址低字节
 106   1          ISP_DATA  = dat;      //送数据到ISP_DATA，只有数据改变时才需重新送
 107   1          //ISP_TRIG();
 108   1          ISP_CMD=2;//写字节模式
 109   1          ISP_TRIG = 0x5a;                //写触发命令(0x5a)
 110   1          ISP_TRIG = 0xa5;                //写触发命令(0xa5)
 111   1          _nop_();
 112   1          DisableEEPROM();
 113   1          //EA = 0;   //重新允许中断
 114   1      }
 115          

C51 COMPILER V9.54   EEPROM                                                                05/25/2020 10:34:23 PAGE 3   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    115    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
