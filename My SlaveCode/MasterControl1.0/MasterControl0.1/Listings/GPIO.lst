C51 COMPILER V9.54   GPIO                                                                  05/25/2020 10:34:23 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN GPIO.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Spring Program Files(x86)\MDK4 and MDK5\C51\BIN\C51.EXE procedure\GPIO.c LAR
                    -GE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\GPIO.lst) TABS(2) OBJECT(GPIO.obj)

line level    source

   1          
   2          /*************  功能说明  **************
   3          
   4          本文件为STC15xxx系列的端口初始化程序,用户几乎可以不修改这个程序.
   5          
   6          
   7          ******************************************/
   8          
   9          #include  "GPIO.h"
  10          
  11          
  12          //========================================================================
  13          // 函数: u8 GPIO_Inilize(u8 GPIO, GPIO_InitTypeDef *GPIOx)
  14          // 描述: 初始化IO口.
  15          // 参数: GPIOx: 结构参数,请参考timer.h里的定义.
  16          // 返回: 成功返回0, 空操作返回1,错误返回2.
  17          // 版本: V1.0, 2012-10-22
  18          //========================================================================
  19          u8  GPIO_Inilize(u8 GPIO, GPIO_InitTypeDef *GPIOx)
  20          {
  21   1        if(GPIO > GPIO_P5)        return 1; //空操作
  22   1        if(GPIOx->Mode > GPIO_OUT_PP) return 2; //错误
  23   1        if(GPIO == GPIO_P0)
  24   1        {
  25   2          if(GPIOx->Mode == GPIO_PullUp)    P0M1 &= ~GPIOx->Pin,  P0M0 &= ~GPIOx->Pin;   //上拉准双向口
  26   2          if(GPIOx->Mode == GPIO_HighZ)   P0M1 |=  GPIOx->Pin,  P0M0 &= ~GPIOx->Pin;   //浮空输入
  27   2          if(GPIOx->Mode == GPIO_OUT_OD)    P0M1 |=  GPIOx->Pin,  P0M0 |=  GPIOx->Pin;   //开漏输出
  28   2          if(GPIOx->Mode == GPIO_OUT_PP)    P0M1 &= ~GPIOx->Pin,  P0M0 |=  GPIOx->Pin;   //推挽输出
  29   2        }
  30   1        if(GPIO == GPIO_P1)
  31   1        {
  32   2          if(GPIOx->Mode == GPIO_PullUp)    P1M1 &= ~GPIOx->Pin,  P1M0 &= ~GPIOx->Pin;   //上拉准双向口
  33   2          if(GPIOx->Mode == GPIO_HighZ)     P1M1 |=  GPIOx->Pin,  P1M0 &= ~GPIOx->Pin;   //浮空输入
  34   2          if(GPIOx->Mode == GPIO_OUT_OD)    P1M1 |=  GPIOx->Pin,  P1M0 |=  GPIOx->Pin;   //开漏输出
  35   2          if(GPIOx->Mode == GPIO_OUT_PP)    P1M1 &= ~GPIOx->Pin,  P1M0 |=  GPIOx->Pin;   //推挽输出
  36   2        }
  37   1        if(GPIO == GPIO_P2)
  38   1        {
  39   2          if(GPIOx->Mode == GPIO_PullUp)    P2M1 &= ~GPIOx->Pin,  P2M0 &= ~GPIOx->Pin;   //上拉准双向口
  40   2          if(GPIOx->Mode == GPIO_HighZ)   P2M1 |=  GPIOx->Pin,  P2M0 &= ~GPIOx->Pin;   //浮空输入
  41   2          if(GPIOx->Mode == GPIO_OUT_OD)    P2M1 |=  GPIOx->Pin,  P2M0 |=  GPIOx->Pin;   //开漏输出
  42   2          if(GPIOx->Mode == GPIO_OUT_PP)    P2M1 &= ~GPIOx->Pin,  P2M0 |=  GPIOx->Pin;   //推挽输出
  43   2        }
  44   1        if(GPIO == GPIO_P3)
  45   1        {
  46   2          if(GPIOx->Mode == GPIO_PullUp)    P3M1 &= ~GPIOx->Pin,  P3M0 &= ~GPIOx->Pin;   //上拉准双向口
  47   2          if(GPIOx->Mode == GPIO_HighZ)   P3M1 |=  GPIOx->Pin,  P3M0 &= ~GPIOx->Pin;   //浮空输入
  48   2          if(GPIOx->Mode == GPIO_OUT_OD)    P3M1 |=  GPIOx->Pin,  P3M0 |=  GPIOx->Pin;   //开漏输出
  49   2          if(GPIOx->Mode == GPIO_OUT_PP)    P3M1 &= ~GPIOx->Pin,  P3M0 |=  GPIOx->Pin;   //推挽输出
  50   2        }
  51   1        if(GPIO == GPIO_P4)
  52   1        {
  53   2          if(GPIOx->Mode == GPIO_PullUp)    P4M1 &= ~GPIOx->Pin,  P4M0 &= ~GPIOx->Pin;   //上拉准双向口
  54   2          if(GPIOx->Mode == GPIO_HighZ)   P4M1 |=  GPIOx->Pin,  P4M0 &= ~GPIOx->Pin;   //浮空输入
C51 COMPILER V9.54   GPIO                                                                  05/25/2020 10:34:23 PAGE 2   

  55   2          if(GPIOx->Mode == GPIO_OUT_OD)    P4M1 |=  GPIOx->Pin,  P4M0 |=  GPIOx->Pin;   //开漏输出
  56   2          if(GPIOx->Mode == GPIO_OUT_PP)    P4M1 &= ~GPIOx->Pin,  P4M0 |=  GPIOx->Pin;   //推挽输出
  57   2        }
  58   1        if(GPIO == GPIO_P5)
  59   1        {
  60   2          if(GPIOx->Mode == GPIO_PullUp)    P5M1 &= ~GPIOx->Pin,  P5M0 &= ~GPIOx->Pin;   //上拉准双向口
  61   2          if(GPIOx->Mode == GPIO_HighZ)   P5M1 |=  GPIOx->Pin,  P5M0 &= ~GPIOx->Pin;   //浮空输入
  62   2          if(GPIOx->Mode == GPIO_OUT_OD)    P5M1 |=  GPIOx->Pin,  P5M0 |=  GPIOx->Pin;   //开漏输出
  63   2          if(GPIOx->Mode == GPIO_OUT_PP)    P5M1 &= ~GPIOx->Pin,  P5M0 |=  GPIOx->Pin;   //推挽输出
  64   2        }
  65   1        return 0; //成功
  66   1      }
  67          
  68          
  69          void  GPIO_config(void)
  70          {
  71   1        GPIO_InitTypeDef  GPIO_InitStructure; 
  72   1        
  73   1        /*控制继电器工作引脚初始化*/
  74   1        
  75   1        GPIO_InitStructure.Pin  = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_6|GPIO_Pin_7;//
             -VALVE5 4 3 2 1   R GLED1
  76   1        GPIO_InitStructure.Mode = GPIO_OUT_PP ; // 推挽输出    
  77   1        GPIO_Inilize(GPIO_P0,&GPIO_InitStructure);
  78   1        
  79   1        
  80   1        GPIO_InitStructure.Pin  = GPIO_Pin_5;// CUP4
  81   1        GPIO_InitStructure.Mode = GPIO_PullUp ; //上拉准双向口   
  82   1        GPIO_Inilize(GPIO_P0,&GPIO_InitStructure);  
  83   1        
  84   1      
  85   1        
  86   1        GPIO_InitStructure.Pin  = GPIO_Pin_0|GPIO_Pin_2|GPIO_Pin_5; //CUP1/CUP3/CUP5
  87   1        GPIO_InitStructure.Mode =GPIO_PullUp ;//上拉准双向口     
  88   1        GPIO_Inilize(GPIO_P1,&GPIO_InitStructure);
  89   1        
  90   1        GPIO_InitStructure.Pin  = GPIO_Pin_1|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_6|GPIO_Pin_7; // RLED3 /R5/G5/ R GLED
             -2
  91   1        GPIO_InitStructure.Mode = GPIO_OUT_PP ; //推挽输出 
  92   1        GPIO_Inilize(GPIO_P1,&GPIO_InitStructure);  
  93   1        
  94   1        
  95   1        GPIO_InitStructure.Pin  = GPIO_Pin_7;// //PUMP
  96   1        GPIO_InitStructure.Mode = GPIO_OUT_PP ; //推挽输出     
  97   1        GPIO_Inilize(GPIO_P2,&GPIO_InitStructure);  
  98   1         
  99   1        GPIO_InitStructure.Pin  = GPIO_Pin_0|GPIO_Pin_1;//   WATERSTATUSE 2/1
 100   1        GPIO_InitStructure.Mode = GPIO_PullUp ;//上拉准双向口    
 101   1        GPIO_Inilize(GPIO_P2,&GPIO_InitStructure);  
 102   1        
 103   1        GPIO_InitStructure.Pin  = GPIO_Pin_6|GPIO_Pin_7; // UART1
 104   1        GPIO_InitStructure.Mode = GPIO_PullUp ; //上拉准双向口  
 105   1        GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);  
 106   1        
 107   1        GPIO_InitStructure.Pin  = GPIO_Pin_1|GPIO_Pin_5| GPIO_Pin_6|GPIO_Pin_7; // LED /CAPSENS/ EXVALVE/GLED3
 108   1        GPIO_InitStructure.Mode = GPIO_OUT_PP;  //       
 109   1        GPIO_Inilize(GPIO_P4,&GPIO_InitStructure);
 110   1        
 111   1        GPIO_InitStructure.Pin  = GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4; //WATERSTATUSE5 4 3
 112   1        GPIO_InitStructure.Mode = GPIO_PullUp;  //       
 113   1        GPIO_Inilize(GPIO_P4,&GPIO_InitStructure);
 114   1        
C51 COMPILER V9.54   GPIO                                                                  05/25/2020 10:34:23 PAGE 3   

 115   1        GPIO_InitStructure.Pin  = GPIO_Pin_2|GPIO_Pin_3;  //R GLED4 
 116   1        GPIO_InitStructure.Mode = GPIO_OUT_PP;//     
 117   1        GPIO_Inilize(GPIO_P5,&GPIO_InitStructure);
 118   1        
 119   1        GPIO_InitStructure.Pin  = GPIO_Pin_4 ;  //CUP2
 120   1        GPIO_InitStructure.Mode = GPIO_PullUp;//     
 121   1        GPIO_Inilize(GPIO_P5,&GPIO_InitStructure);
 122   1        
 123   1      
 124   1        
 125   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    638    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
