C51 COMPILER V9.54   MAIN                                                                  05/19/2020 11:32:55 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Spring Program Files(x86)\MDK4 and MDK5\C51\BIN\C51.EXE USER\main.c LARGE RO
                    -M(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USER;.\FWLIB) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(
                    -.\Objects\main.obj)

line level    source

   1          //--------------------------------------------------------------------------------------
   2          //通信使用串口1，USART1
   3          //Timer0用来做任务的时间分片
   4          //    基础任务100ms允许一次，上传任务最小500ms允许一次
   5          //    设置Timer0定时时间为10ms
   6          //Timer1用来做串口的超时接收,设置Timer1定时时间为10ms(4ms左右就可以接收约40Byte)
   7          //Timer2做波特率发生器
   8          //------------------------------------------------------------------------------------------
   9          
  10          #include "config.h"
  11          #include "TaskUart.h"
  12          #include "TimeProcess.h"
  13          #include "TaskState.h"
  14          #include "delay.h"
  15          
  16          
  17          
  18          //任务使能标志初始化
  19            u8 TaskUartFlag = 0;//任务1：数据帧接收解析任务
  20            u8 TaskStateScanFlag = 0;//任务2：设备状态扫描检测任务
  21            u8 TaskUploadFlag = 0;//任务3：数据上传任务
  22            u8 TaskEEPROMFlag = 0;//任务4：EEPROM读写任务
  23            u8 TaskControlFlag = 0;//任务5：设备运行控制任务
  24            
  25          //两个数据区的定义和初始化，每个位置的数据参考总协议文档表10、表11
  26          u8 SlaveDataBuff[SDB_LEN] = {0};//本地状态数据区
  27          u8 MasterDataBuff[MDB_LEN] = {0};//主控STM32下发的数据区
  28          
  29          
  30          
  31          
  32          void main()
  33          {
  34   1        //系统初始化，包括GPIO、USART、Timer、上电自检等
  35   1        GPIO_config();
  36   1        Timer0Config();
  37   1        Timer1Config();
  38   1        TaskUart1_Init(115200);
  39   1        FramePacking(0x70,SlaveDataBuff);
  40   1        
  41   1        LED=1;delay_ms(500);
  42   1        LED=0;delay_ms(500);
  43   1        LED=1;delay_ms(500);
  44   1        
  45   1        EA = 1;
  46   1        
  47   1        MasterDataBuff[MA_time] = 0x00;
  48   1        
  49   1        while(1)
  50   1        {
  51   2      
  52   2          if(TaskUartFlag != 0)//数据解析任务允许工作，该标志位由定时器中断服务函数置位
  53   2          {
C51 COMPILER V9.54   MAIN                                                                  05/19/2020 11:32:55 PAGE 2   

  54   3            if(DataValidityCheck(ReceiveBuff) == 0)//校验成功
  55   3            {
  56   4              LED = ~LED;
  57   4              DataAnalyze(ReceiveBuff);//解析数据
  58   4            }
  59   3            ReceiveEnable=0;//清允许接收标志位
  60   3            TaskUartFlag = 0;//清除标志位
  61   3          }
  62   2          
  63   2          if(TaskStateScanFlag != 0)//基础任务允许工作
  64   2          { 
  65   3            TaskStateScanFlag = 0;//清除标志位
  66   3            delay_ms(50);//假设需要50ms
  67   3            //基础任务，完成对杯座状态的检测，根据检测的结果，可以写其他任务的允许标志位
  68   3            //将检测的数据更新保存到本地状态数据区
  69   3          }
  70   2          
  71   2          if(TaskUploadFlag != 0)//上传状态任务允许工作
  72   2          {
  73   3            TaskUploadFlag = 0;//清除标志位
  74   3            FramePacking(0x71,SlaveDataBuff);//通过串口，把本地状态数据区的内容打包上传
  75   3          }
  76   2          
  77   2          if(TaskEEPROMFlag != 0)//EEPROM任务允许工作
  78   2          {
  79   3              //直接读取MasterDataBuff的内容写EEPROM,写完在读取EEPROM，读取的结果写到SlaveDataBuff
  80   3              SlaveDataBuff[21] = MasterDataBuff[21];//测试用，假设已经写进去了
  81   3              SlaveDataBuff[22] = MasterDataBuff[22];
  82   3              TaskEEPROMFlag = 0;//清除标志位
  83   3          }
  84   2          
  85   2          if(TaskControlFlag != 0)//控制任务允许工作
  86   2          {
  87   3            TaskControlFlag = 0;//清除标志位
  88   3            //读取指令数据区的内容，根据数据完成对各设备的控制
  89   3            SendDataLen(MasterDataBuff,26);//测试用，看有没有把状态数据写到数据区
  90   3          }
  91   2        }
  92   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    173    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     65    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
