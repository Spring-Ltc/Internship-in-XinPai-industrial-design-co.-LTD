C51 COMPILER V9.54   TIMEPROCESS                                                           05/20/2020 10:08:50 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TIMEPROCESS
OBJECT MODULE PLACED IN .\Objects\TimeProcess.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Spring Program Files(x86)\MDK4 and MDK5\C51\BIN\C51.EXE USER\TimeProcess.c C
                    -OMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USER;.\FWLIB) DEBUG OBJECTEXTEND PRINT(.\Listings\TimeProcess.lst)
                    - TABS(2) OBJECT(.\Objects\TimeProcess.obj)

line level    source

   1          
   2          
   3          #include "TimeProcess.h"
   4          #include "timer.h"
   5          #include "TaskUart.h"
   6          
   7          
   8          
   9          void Timer0Config(void)
  10          {
  11   1        TIM_InitTypeDef   TIM_InitStructure;          //结构定义
  12   1        TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
  13   1        TIM_InitStructure.TIM_Polity    = PolityHigh;     //指定中断优先级, PolityHigh,PolityLow
  14   1        TIM_InitStructure.TIM_Interrupt = ENABLE;       //中断是否允许,   ENABLE或DISABLE
  15   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_12T;      //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK
             -_Ext
  16   1        TIM_InitStructure.TIM_ClkOut    = DISABLE;        //是否输出高速脉冲, ENABLE或DISABLE
  17   1        TIM_InitStructure.TIM_Value     = 65536UL - (MAIN_Fosc / 1200);   //初值, 10ms
  18   1        TIM_InitStructure.TIM_Run       = ENABLE;       //是否初始化后启动定时器, ENABLE或DISABLE
  19   1        Timer_Inilize(Timer0,&TIM_InitStructure);       //初始化Timer0    Timer0,Timer1,Timer2
  20   1      }
  21          
  22          
  23          void Timer1Config(void)
  24          {
  25   1        TIM_InitTypeDef   TIM_InitStructure;          //结构定义
  26   1        TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
  27   1        TIM_InitStructure.TIM_Polity    = PolityLow;      //指定中断优先级, PolityHigh,PolityLow
  28   1        TIM_InitStructure.TIM_Interrupt = ENABLE;       //中断是否允许,   ENABLE或DISABLE
  29   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;     //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_
             -Ext
  30   1        TIM_InitStructure.TIM_ClkOut    = DISABLE;        //是否输出高速脉冲, ENABLE或DISABLE
  31   1        TIM_InitStructure.TIM_Value     = 65536UL - (MAIN_Fosc / 100);    //初值,10ms
  32   1        TIM_InitStructure.TIM_Run       = ENABLE;       //是否初始化后启动定时器, ENABLE或DISABLE
  33   1        Timer_Inilize(Timer1,&TIM_InitStructure);       //初始化Timer0    Timer0,Timer1,Timer2
  34   1      
  35   1      }
  36          
  37          
  38          //任务时间分片
  39          u8 timer10ms=0;
  40          u8 timer500ms=0;
  41          /********************* Timer0中断函数************************/
  42          void timer0_int (void) interrupt TIMER0_VECTOR
  43          {
  44   1        timer10ms++;
  45   1        if(timer10ms>=10)
  46   1        {
  47   2          timer10ms=0;
  48   2          timer500ms++;
  49   2          TaskStateScanFlag=1;//基础任务，约100ms允许一次
C51 COMPILER V9.54   TIMEPROCESS                                                           05/20/2020 10:08:50 PAGE 2   

  50   2        }
  51   1        if(MasterDataBuff[MA_time] !=0 )//允许上传
  52   1        {
  53   2          if(timer500ms >= 5 * MasterDataBuff[MA_time])
  54   2          {
  55   3            TaskUploadFlag=1;//上传任务，约500ms X 倍数 允许一次
  56   3            timer500ms=0;
  57   3          }
  58   2        }
  59   1        else  timer500ms=0;
  60   1      }
  61          
  62          //串口超时接收用
  63          /********************* Timer1中断函数************************/
  64          void timer1_int (void) interrupt TIMER1_VECTOR
  65          {
  66   1        TR1 = 0;//关定定时器
  67   1        TaskUartFlag = 1;
  68   1      //  TH1 = (u8)((65536UL - (MAIN_Fosc / 100)) >> 8);
  69   1      //  TL1 = (u8)(65536UL - (MAIN_Fosc / 100));  //重装初值,10ms
  70   1      }
  71          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    174    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      2      16
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
